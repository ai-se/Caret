source('~/.active-rstudio-document', echo=TRUE)
source('~/Google Drive/Course/CSC591/Final/final-data/final2.R', echo=TRUE)
source('~/Google Drive/Course/CSC591/Final/final-data/final2.R', echo=TRUE)
source('~/Google Drive/Course/CSC591/Final/final-data/final2.R', echo=TRUE)
source('~/Google Drive/Course/CSC591/Final/final-data/final2.R', echo=TRUE)
source('~/Google Drive/Course/CSC591/Final/test.R', echo=TRUE)
source('~/Google Drive/Course/CSC591/Final/test.R', echo=TRUE)
source('~/Google Drive/Course/CSC591/Final/test.R', echo=TRUE)
source('~/Google Drive/Course/CSC591/Final/test.R', echo=TRUE)
models
source('~/Google Drive/Course/CSC591/Final/test.R', echo=TRUE)
source('~/Google Drive/Course/CSC591/Final/final-data/final2.R', echo=TRUE)
models
source('~/Google Drive/Course/CSC591/Final/final-data/final2.R', echo=TRUE)
pi
MLE
models[[j]]$class
models[[1]]$class
delta
oneTest
sigma
N
det
MLE
((2*pi)**(-N/2))*(det**(-0.5))
(2*pi)**(-N/2)
det**(-0.5)
exp(-0.5 * delta %*% sigma**(-1)%*% t(delta))
exp(-0.5 * delta %*% sigma**(-1)%*% t(delta))
exp(-0.5 * delta* sigma**(-1)%*% t(delta))
source('~/Google Drive/Course/CSC591/Final/final-data/final2.R', echo=TRUE)
exp(-0.5 * delta* sigma**(-1)%*% t(delta))
MLE
thisMLE
testInp
source('~/Google Drive/Course/CSC591/Final/final-data/final2.R', echo=TRUE)
source('~/Google Drive/Course/CSC591/Final/final-data/final2.R', echo=TRUE)
test
source('~/Google Drive/Course/CSC591/Final/final-data/final2.R', echo=TRUE)
source('~/Google Drive/Course/CSC591/Final/final-data/final2.R', echo=TRUE)
class
highestMLE
install.packages("caret")
source('~/Google Drive/Course/CSC591/Final/final-data/final2.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/Google Drive/Course/CSC591/Final/final-data/final2.R', echo=TRUE)
source('~/Google Drive/Course/CSC591/Final/final-data/final2.R', echo=TRUE)
source('~/Google Drive/Course/CSC591/Final/final-data/final2.R', echo=TRUE)
source('~/Google Drive/Course/CSC591/Final/final-data/final2.R', echo=TRUE)
source('~/Google Drive/Course/CSC591/Final/final-data/final2.R', echo=TRUE)
source('~/Google Drive/Course/CSC591/Final/final-data/final2.R', echo=TRUE)
source('~/Google Drive/Course/CSC591/Final/final-data/final2.R', echo=TRUE)
delta
source('~/Google Drive/Course/CSC591/Final/test.R', echo=TRUE)
dif
model[[1]]$mu
models[[1]]$mu
dif
model$sigma
model$sig
models[[1]]$sigma
source('~/Google Drive/Course/CSC591/Final/test.R', echo=TRUE)
MLE
det
source('~/Google Drive/Course/CSC591/Final/test.R', echo=TRUE)
source('~/Google Drive/Course/CSC591/Final/test.R', echo=TRUE)
source('~/Google Drive/Course/CSC591/Final/test.R', echo=TRUE)
source('~/Google Drive/Course/CSC591/Final/test.R', echo=TRUE)
source('~/Google Drive/Course/CSC591/Final/test.R', echo=TRUE)
source('~/Google Drive/Course/CSC591/Final/final-data/final2.R', echo=TRUE)
source('~/Google Drive/Course/CSC591/Final/final-data/final2.R', echo=TRUE)
source('~/Google Drive/Course/CSC591/Final/final-data/final2.R', echo=TRUE)
source('~/Google Drive/Course/CSC591/Final/final-data/final2.R', echo=TRUE)
states <- as.data.frame(
state.x77[,c("Murder","Population",
"Illiteracy", "Income", "Frost")])
states
library(car)
states <- as.data.frame(
state.x77[,c("Murder","Population",
"Illiteracy", "Income", "Frost")])
dim(states)
t(states[1,])
dtrain <- states[1:25,]
dtest <- states[26:50,]
murderModel <- lm (Murder ~ Population + Illiteracy
+ Income + Frost, data=dtrain)
summary (murderModel)
crPlots(murderModel)
qqPlot(dtrain$Murder)
durbinWatsonTest(murderModel)
ncvTest(murderModel)
sqrt(vif(murderModel))>2.0
outlierTest(murderModel)
chisq.test(dtrain)
head(dtrain)
library(car)
states <- as.data.frame(
state.x77[,c("Murder","Population",
"Illiteracy", "Income", "Frost")])
dim(states)
t(states[1,])
dtrain <- states[1:25,]
dtest <- states[26:50,]
murderModel <- lm (Murder ~ Population + Illiteracy
+ Income + Frost, data=dtrain)
summary (murderModel)
?crPlot
## Linearity
crPlots(murderModel)
plot(murderModel)
plot(murderModel)
## Linearity
crPlots(murderModel)
## Normality
qqPlot(dtrain$Murder)
##Error
durbinWatsonTest(murderModel)
## Homoscedasticity
ncvTest(murderModel)
## Multicollinearity
sqrt(vif(murderModel))>2.0
## Sensitivity to outliers.
outlierTest(murderModel)
?crPlots
crPlots(m<-lm(prestige~income+education, data=Prestige))
crPlots(m, terms=~ . - education)
crPlots(lm(prestige ~ log2(income) + education + poly(women,2), data=Prestige))
crPlots(glm(partic != "not.work" ~ hincome + children,
data=Womenlf, family=binomial))
murderModel <- lm (Murder ~ Population + Illiteracy
+ Income + Frost, data=dtrain)
summary (murderModel)
## Linearity
crPlots(murderModel)
crPlots(lm (Murder ~ Population + Illiteracy
+ Income + cos(Frost), data=dtrain))
crPlots(lm (Murder ~ Population + Illiteracy + Income + (Frost), data=dtrain))
crPlots(m<-lm(prestige~income+education, data=Prestige))
crPlots(lm(prestige ~ log2(income) + education + poly(women,2), data=Prestige))
crPlots(lm (Murder ~ Population + Illiteracy + Income + (Frost), data=dtrain))
crPlots(lm (Murder ~ log2(Population) + Illiteracy + Income + (Frost), data=dtrain))
crPlots(lm (Murder ~ poly(Population,2) + Illiteracy + Income + (Frost), data=dtrain))
crPlots(lm (Murder ~ poly(Population,2) + log2(Illiteracy) + Income + (Frost), data=dtrain))
crPlots(lm (Murder ~ poly(Population,2) + log2(Illiteracy) + sin(Income) + (Frost), data=dtrain))
crPlots(lm (Murder ~ Population + log2(Illiteracy) + sin(Income) + (Frost), data=dtrain))
crPlots(lm (Murder ~ Population + log2(Illiteracy) + sin(Income) + cos(Frost), data=dtrain))
crPlots(lm (Murder ~ Population + log2(Illiteracy) + sin(Income) + poly(Frost,2), data=dtrain))
crPlots(lm (Murder ~ Population + sin(Illiteracy) + sin(Income) + poly(Frost,2), data=dtrain))
crPlots(lm (Murder ~ Population + (Illiteracy) + sin(Income) + poly(Frost,2), data=dtrain))
crPlots(lm (Murder ~ Population + log2(Illiteracy) + sin(Income) + poly(Frost,2), data=dtrain))
## Normality
crPlots(lm (Murder ~ Population + log2(Illiteracy) + sin(Income) + Frost, data=dtrain))
, data=dtrain))
crPlots(lm (Murder ~ Population, data=dtrain))
crPlots(lm (Murder ~ sin(Population), data=dtrain))
?sin
crPlots(lm (Murder ~ sin(Population*pi), data=dtrain))
crPlots(lm (Murder ~ cos(Population*pi), data=dtrain))
crPlots(lm (Murder ~ Population, data=dtrain))
crPlots(lm (Murder ~ log2(Population), data=dtrain))
state.x77[,c("Murder","Population",
"Illiteracy", "Income", "Frost")])
dim(states)
crPlots(lm (Murder ~ (Population), data=dtrain))
crPlots(lm (Murder ~ poly(Population,2), data=dtrain))
crPlots(murderModel)
+ Income + log2(Frost,2), data=dtrain))
+ Income + log2(Frost), data=dtrain))
## Normality
crPlots(lm (Murder ~ Population + Illiteracy
+ Income + log2(Frost), data=dtrain))
qqPlot(dtrain$Murder)
##Error
durbinWatsonTest(murderModel)
## Homoscedasticity
outlierTest(murderModel)
qqPlot(dtrain$Murder)
qqPlot(dtrain)
qqPlot(dtrain$Murder)
ncvTest(murderModel)
library(gvlma)
install.packages("gvlma")
library(gvlma)
print(gvlma(murderModel))
library(car)
qqPlot(dtrain$Murder)
library(gvlma)
print(gvlma(murderModel))
crPlots(murderModel)
crPlots(lm (Murder ~ Population + Illiteracy
crPlots(lm (Murder ~ log2(Population) + Illiteracy
+ Income + Frost, data=dtrain))
crPlots(lm (Murder ~ log2(Population) + Illiteracy+ Income + Frost, data=dtrain))
crPlots(lm (Murder ~ log2(Population) + sin(Illiteracy)+ Income + Frost, data=dtrain))
crPlots(lm (Murder ~ log2(Population) + log2(Illiteracy)+ Income + Frost, data=dtrain))
crPlots(lm (Murder ~ sin(Population) + log2(Illiteracy)+ Income + Frost, data=dtrain))
crPlots(lm (Murder ~ ploy(Population,2) + log2(Illiteracy)+ Income + Frost, data=dtrain))
## Normality
crPlots(lm (Murder ~ ploy(Population,2) + log2(Illiteracy)+ Income + Frost, data=dtrain))
crPlots(lm (Murder ~ poly(Population,2) + log2(Illiteracy)+ Income + Frost, data=dtrain))
## Normality
crPlots(lm (Murder ~ poly(Population,2) + log2(Illiteracy)+ sin(Income) + Frost, data=dtrain))
crPlots(lm (Murder ~ poly(Population,2) + log2(Illiteracy)+ sin(Income) + cos(Frost), data=dtrain))
crPlots(lm (Murder ~ poly(Population,2) + log2(Illiteracy)+ sin(Income) + Frost, data=dtrain))
crPlots(lm (Murder ~ poly(Population,2) + log2(Illiteracy)+ sin(Income) + poly(Frost,2), data=dtrain))
crPlots(lm (Murder ~ poly(Population,2) + log2(Illiteracy)+ sin(Income) + poly(Frost,3), data=dtrain))
crPlots(lm (Murder ~ poly(Population,2) + log2(Illiteracy)+ sin(Income) + poly(Frost,4), data=dtrain))
crPlots(lm (Murder ~ poly(Population,2) + log2(Illiteracy)+ sin(Income) + poly(Frost,2), data=dtrain))
crPlots(lm (Murder ~ poly(Population,3) + log2(Illiteracy)+ sin(Income) + poly(Frost,2), data=dtrain))
crPlots(lm (Murder ~ poly(Population,2) + log2(Illiteracy)+ sin(Income) + poly(Frost,2), data=dtrain))
ncvTest(murderModel)
## Multicollinearity
sqrt(vif(murderModel))>2.0
?durbinWatsonTest
library(car)
qqPlot(dtrain$Murder)
library(gvlma)
print(gvlma(murderModel))
##Error
durbinWatsonTest(murderModel)
ncvTest(murderModel)
sqrt(vif(murderModel))>2.0 ###
outlierTest(murderModel)
crPlots(lm (Murder ~ poly(Population,2) + log2(Illiteracy)+ sin(Income) + poly(Frost,2), data=dtrain))
vif(murderModel)
?vif
crPlots(murderModel)
crPlots(lm (Murder ~ poly(Population,2) + log2(Illiteracy)+ sin(Income) + poly(Frost,2), data=dtrain))
summary (murderModel)
head(dtrain)
dtrain
cov(states)
states * t(states[1,])
states[1,1]
states[1,]
states * t(states)
state[1,]
states[1,]
states[1,]*t(states[1,])
states[1,]*t(states[2,])
t.test
?t.test
t.test(states)
plot(extra ~ group, data = sleep)
rankMatrix(states)
?rankMatrix
rankMatrix(states)
rankMatrix
?
durbinWatsonTest(murderModel) # staticstic =2.44, p-value = 0.256
rankMatrix
rankMatrix()
?rankMatrix
library(Matrix)
rankMatrix(states)
?chiq.test
?chiq
chisq
?chisq
?chisq.test
chisq.test(states)
chisq.test(table(states))
durbinWatsonTest(murderModel) # staticstic =2.44, p-value = 0.256
outlierTest(murderModel) ### p=0.065
durbinWatsonTest(murderModel$residuals) # staticstic =2.44, p-value = 0.256
## Homoscedasticity
ncvTest(murderModel) #  p = 0.935
sqrt(vif(murderModel))
summary(lm(murder~Population+Illiteracity,data=dtrain))
summary(lm(Murder~Population+Illiteracity,data=dtrain))
Illiteracy
library(car)
states <- as.data.frame(
state.x77[,c("Murder","Population",
"Illiteracy", "Income", "Frost")])
dim(states)
t(states[1,])
dtrain <- states[1:25,]
dtest <- states[26:50,]
murderModel <- lm (Murder ~ Population + Illiteracy
+ Income + Frost, data=dtrain)
summary (murderModel)
## Linearity
crPlots(murderModel)
crPlots(lm (Murder ~ poly(Population,2) + log2(Illiteracy)+ sin(Income) + poly(Frost,2), data=dtrain))
## Normality
library(car)
qqPlot(dtrain$Murder)
library(gvlma)
print(gvlma(murderModel))
##Error
durbinWatsonTest(murderModel$residuals) # staticstic =2.44, p-value = 0.256
## Homoscedasticity
ncvTest(murderModel) #  p = 0.935
## Multicollinearity
sqrt(vif(murderModel))>2.0 ### False
## Sensitivity to outliers.
outlierTest(murderModel) ### p=0.065
##Model complexity
summary(lm(Murder~Population+Illiteracy,data=dtrain))
summary(murderModel)
summary(lm(Murder~Population+Illiteracy,data=dtrain))
library(Epi)
install.packaages("Epi")
install.packages("Epi")
library(Epi)
norm = rep(1:5, times=c(33,6,6,11,2))
abnorm = rep(1:5, times=c(3,2,2,11,33))
norm
testres = c(abnorm,norm)
testres
truestat = c(rep(1,length(abnorm)), rep(0,length(norm)))
truestat
tab=as.matrix(table(truestat, testres))
summary(tab)
tab
ROC(testres, truestat)
norm = rep(0:1, times=c(33,6,6,11,2))
abnorm = rep(0:1, times=c(3,2,2,11,33))
testres = c(abnorm,norm)
truestat = c(rep(1,length(abnorm)), rep(0,length(norm)))
# Summary table (Table I in the paper)
tab=as.matrix(table(truestat, testres))
tab
norm = rep(1:2, times=c(33,6,6,11,2))
abnorm = rep(1:2, times=c(3,2,2,11,33))
testres = c(abnorm,norm)
truestat = c(rep(1,length(abnorm)), rep(2,length(norm)))
norm = rep(1:2, times=c(33,6,))
abnorm = rep(1:2, times=c(3,2))
testres = c(abnorm,norm)
truestat = c(rep(1,length(abnorm)), rep(2,length(norm)))
# Summary table (Table I in the paper)
norm = rep(1:2, times=c(33,6))
abnorm = rep(1:2, times=c(3,2))
testres = c(abnorm,norm)
truestat = c(rep(1,length(abnorm)), rep(2,length(norm)))
# Summary table (Table I in the paper)
tab=as.matrix(table(truestat, testres))
tab
ROC(testres,truestat)
norm = rep(1:2, times=c(33,6))
abnorm = rep(1:2, times=c(3,2))
testres = c(abnorm,norm)
truestat = c(rep(0,length(abnorm)), rep(1,length(norm)))
# Summary table (Table I in the paper)
tab=as.matrix(table(truestat, testres))
ROC(testres,truestat)
tab
norm = rep(1:2, times=c(33,6))
abnorm = rep(1:2, times=c(3,2))
testres = c(abnorm,norm)
truestat = c(rep(1,length(abnorm)), rep(0,length(norm)))
# Summary table (Table I in the paper)
tab=as.matrix(table(truestat, testres))
ROC(testres,truestat)
tab
install.packages(ada)
install.packages("ada")
?ada
library(ada)
library("ada")
?ada
getModel
source('~/Github/Caret/caret_AdaBoost.R')
install.packages("coefplot")
install.packages("coefplot")
library("coefplot")
getModelinfo
ada
library("ada")
install.packages(rpart)
install.packages("rpart")
install.packages("rpart")
library("ada")
?version
R. Version()
R.Version()
install.packages("installr")
library(installr)
library(caret)
library("pROC")
library(C50)
R.version()
R.Version()
install.packages("caret")
install.packages("pROC")
install.packages("C50")
install.packages("ada")
library(caret)
library("pROC")
library(C50)
library("ada")
getModelInfo("ada")
getModelInfo("ada")$ada$parameters
?ada
?R
??C5.0
debugSource('~/Github/Caret/caret_AdaBoost.R')
debugSource('~/Github/Caret/caret_AdaBoost.R')
debugSource('~/Github/Caret/caret_AdaBoost.R')
debugSource('~/Github/Caret/caret_AdaBoost.R')
debugSource('~/Github/Caret/caret_AdaBoost.R')
Fit2$bestTune
Fit2$bestTune$iter
Fit2$bestTune$maxdepth
ada(trainX, trainY, iter = 50, maxdepth=2)
?ada
con <- rpart.control(maxdepth=100,cp=-1,minsplit=0,xval=0)
con <- rpart.control(maxdepth=10,cp=-1,minsplit=0,xval=0)
ada(trainX, trainY, iter = 50, con)
source('~/Github/Caret/caret_AdaBoost.R')
debugSource('~/Github/Caret/caret_AdaBoost.R')
?trainControl
trainControl
debugSource('~/Github/Caret/caret_AdaBoost.R')
tuned_predicted
data.frame(tuned_predicted)$Y
data.frame(tuned_predicted)
head(data.frame(tuned_predicted)$Y)
head(data.frame(tuned_predicted))
head(data.frame(tuned_predicted,names = (N,Y)))
AA<-data.frame(tuned_predicted)
names(AA) <-c(N,Y)
names(AA) <-c('N','Y')
head(AA)
test_data$bug
rev(levels(test_data$bug))
debugSource('~/Github/Caret/caret_AdaBoost.R')
tuned_roc
Default_auc
source('~/Github/Caret/caret_AdaBoost.R')
source('~/Github/Caret/caret_AdaBoost.R')
source('~/Github/Caret/caret_AdaBoost.R')
getModelInfo("rpart")
getModelInfo("rpart")$paramters
getModelInfo("rpart")[[1]]$paramters
getModelInfo("rpart")$rpart$paramters
getModelInfo("rpart")$rpart$parameters
?rpart
source('~/Github/Caret/caret_cart.R')
source('~/Github/Caret/caret_cart.R')
warnings()
source('~/Github/Caret/caret_cart.R')
debugSource('~/Github/Caret/caret_cart.R')
debugSource('~/Github/Caret/caret_cart.R')
Fit2$bestTune$cp
Fit2
train_data
debugSource('~/Github/Caret/caret_cart.R')
tuned_model
tuned_auc
debugSource('~/Github/Caret/caret_cart.R')
improve
debugSource('~/Github/Caret/caret_cart.R')
debugSource('~/Github/Caret/caret_cart.R')
debugSource('~/Github/Caret/caret_cart.R')
improve
median(improve)
median(improve)
median(improve)
median(improve)
median(improve)
avnnet
avNNet
?avNNet
getModelInfo("avNNet")$avNNet$parameters
source('~/Github/Caret/caret_avnnet.R')
source('~/Github/Caret/caret_avnnet.R')
debugSource('~/Github/Caret/caret_avnnet.R')
?train
debugSource('~/Github/Caret/caret_avnnet.R')
debugSource('~/Github/Caret/caret_avnnet.R')
debugSource('~/Github/Caret/caret_avnnet.R')
debugSource('~/Github/Caret/caret_avnnet.R')
Fit2
debugSource('~/Github/Caret/caret_avnnet.R')
avNNet(train_data$bug ~ ., data = train_data, decay = Fit2$bestTune$decay, bag = Fit2$bestTune$bag, size = Fit2$bestTune$size)
source('~/.active-rstudio-document')
source('~/Github/Caret/caret_avnnet.R')
Q
debugSource('~/Github/Caret/caret_avnnet.R')
debugSource('~/Github/Caret/caret_avnnet.R')
improve
tuned_auc
Default_auc
improve
tuned_auc
Default_auc
tuned_model
improve
debugSource('~/Github/Caret/caret_avnnet.R')
source('~/Github/Caret/caret_avnnet.R')
results_data
median(results_data)
plot(results_data)
boxplot(results_data)
summary(results_data)
save.image("~/Github/Caret/caret_avnnet.RData")
debugSource('~/Github/Caret/caret_cart.R')
head(jdt)
jdt$X <-NULL
head(jdt)
pde
debugSource('~/Github/Caret/caret_cart.R')
head(pde)
source('~/Github/Caret/caret_cart.R')
results_data
summary(results_data)
install.packages("xlsx")
library(xlsx)
